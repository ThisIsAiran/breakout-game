<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Gamedev Canvas Workshop - lesson 3: bounce off the walls</title>
    <style>* { padding: 0; margin: 0; } canvas { background: #eee; display: block; margin: 0 0; }
    
         #aman{
           width:500px;
            height:30px;
            background-color: black;
            
        }
      #aman1{
            font-size: 25px;
            padding-left:200px;
            text-decoration: none;
        }
        #aman1:hover{
            color: white;
        }
    </style>
     <script type="text/javascript" src="Audio-HTML5.js"></script>
</head>
    
<body>

<canvas id="myCanvas" width="500" height="500"></canvas>
<div id ="aman">
<a href="breakout.html" id ="aman1">Previous level</a>
        </div>
<script>
    var canvas = document.getElementById("myCanvas");
    var ctx = canvas.getContext("2d");
    
    
      function border() {
       var gradient = ctx.createLinearGradient(0, 0, 650, 0);
gradient.addColorStop("0", "black");
gradient.addColorStop("0.5", "grey");
gradient.addColorStop("1.0", "black");

// Fill with gradient
ctx.strokeStyle = gradient;
ctx.lineWidth = 9;
ctx.strokeRect(0, 0, 500, 500);
    }
    var ballRadius = 10;
    var x = canvas.width/2;
    var y = canvas.height-30;
    var dx = -2;
    var dy = -3;
    var m =canvas.width/2-40;
    var n= canvas.height-30;
    var dm = -2;
    var dn = -1;
    var paddleHeight = 10;
    var paddleWidth = 110;
    var paddleX = (canvas.width-paddleWidth)/2;
    var rightPressed = false;
    var leftPressed = false;
    
var brickRowCount = 5;
var brickColumnCount = 5;
var brickWidth = 75;
var brickHeight = 20;
var brickPadding = 23;
var brickOffsetTop = 30;
var brickOffsetLeft = 17;
var score = 0;
    var num =4;
var bricks = [];
for(c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status:1 };
    }
}
    for(c=0; c<brickColumnCount; c++) {
    bricks[c] = [];
    for(r=0; r<brickRowCount; r++) {
        bricks[c][r] = { x: 0, y: 0, status:1 };
    }
}
    document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);

function keyDownHandler(e) {
    if(e.keyCode == 39) {
        rightPressed = true;
    }
    else if(e.keyCode == 37) {
        leftPressed = true;
    }
}
function keyUpHandler(e) {
    if(e.keyCode == 39) {
        rightPressed = false;
    }
    else if(e.keyCode == 37) {
        leftPressed = false;
    }
}
    
  
      function drawPaddle() {
        ctx.beginPath();
        var grd =ctx.createLinearGradient(0,0,650,0);
        grd.addColorStop(0,"grey");
        grd.addColorStop(.8,"black");
         grd.addColorStop(1,"grey");
        ctx.fillStyle=grd;
        ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
        ctx.fill();
        ctx.closePath();
    }
    function drawBall() {
          ctx.beginPath();
        ctx.arc(x, y, ballRadius, 0, Math.PI*2);
        ctx.lineWidth =3;
        ctx.strokeStyle = "black";
        ctx.stroke();
        ctx.closePath();
        ctx.beginPath();
        ctx.arc(x, y, ballRadius*.7, 0, Math.PI*2);
        ctx.fillStyle = "grey";
        ctx.fill();
        ctx.closePath();
        ctx.beginPath();
         ctx.arc(m,n, ballRadius*.7, 0, Math.PI*2);
         ctx.fillStyle = "grey";
        ctx.fill();
        ctx.closePath();
          ctx.beginPath();
        ctx.arc(m, n, ballRadius, 0, Math.PI*2);
        ctx.lineWidth =3;
        ctx.strokeStyle = "black";
        ctx.stroke();
        ctx.closePath();
    }
      function drawScore() {
        ctx.font = "16px  Comic Sans MS";
        ctx.fillStyle = "black";
        ctx.fillText("Score: "+score, 8, 20);
    }
    function level()
    {
        ctx.font = "16px  Comic Sans MS";
        ctx.fillStyle ="black"
        ctx.fillText("Level: "+ num,canvas.width/2,20);
        
    }
    
    
    function drawBricks() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
                if(bricks[c][r].status == 1){
            var brickX = (c*(brickWidth+brickPadding))+brickOffsetLeft;
            var brickY = (r*(brickHeight+brickPadding))+brickOffsetTop;
            bricks[c][r].x = brickX;
            bricks[c][r].y = brickY;
                        ctx.beginPath();
                      var grd =ctx.createLinearGradient(0,0,700,0);
        grd.addColorStop(0,"grey");
        grd.addColorStop(.8,"black");
         grd.addColorStop(1,"grey");
        ctx.fillStyle=grd;
                    ctx.rect(brickX, brickY, brickWidth, brickHeight);
                    ctx.fill();
                    ctx.closePath();
                }
        
        }
    }
}
function collisionDetection() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
                if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
                    dy = -dy;
                    b.status = 0;
                      score++;
                     if(score == brickRowCount*brickColumnCount) {
                            alert("YOU WIN, CONGRATS and Play for next level!");
                            dy=0;
                            dx=0;
                            paddleX=0;
                         
                        }
                }
            }
        }
    }
}
    function collisionDetection2() {
    for(c=0; c<brickColumnCount; c++) {
        for(r=0; r<brickRowCount; r++) {
            var b = bricks[c][r];
            if(b.status == 1) {
                if(m> b.x && m < b.x+brickWidth && n > b.y && n < b.y+brickHeight) {
                    dn = -dn;
                    b.status = 0;
                    score++;
                     if(score == brickRowCount*brickColumnCount) {
                            alert("YOU WIN, CONGRATS and Play for next level!");
                            dn=0;
                            dm=0;
                            paddleX=0;
                         
                        }
                }
            }
        }
    }
}
    
    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawBall();
        drawPaddle();
        drawBricks();
        collisionDetection()
        collisionDetection2()
         border()
        drawScore();
        level();
        if(x + dx > canvas.width-ballRadius || x + dx < ballRadius) {
            dx = -dx;
        }
        if(y + dy < ballRadius) {
    dy = -dy;
} else if(y + dy > canvas.height-ballRadius) {
     if(x > paddleX && x < paddleX + paddleWidth) {
        dy = -dy;
    }
    else {
        alert("GAME OVER");
        document.location.reload();
    }
}
        if(m+dm > canvas.width-ballRadius || m+dm <ballRadius)
            {
                dm=-dm;
            }
        if(n + dn < ballRadius)
            {
                dn=-dn;
            }
        else if(n+dn>canvas.height-ballRadius)
            {
                if(m > paddleX && m < paddleX + paddleWidth)
                    {
                        dn =-dn;
                    }
                else{
                     alert("GAME OVER");
        document.location.reload();
                }
            }
        
         if(rightPressed && paddleX < canvas.width-paddleWidth) {
        paddleX += 7;
    }
    else if(leftPressed && paddleX > 0) {
        paddleX -= 7;
    }
        
        x += dx;
        y += dy;
        n += dn;
        m += dm;
    }
    setInterval(draw, 10);
</script>

</body>
</html>